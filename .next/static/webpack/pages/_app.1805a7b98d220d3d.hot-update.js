"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: function() { return /* binding */ apiService; }\n/* harmony export */ });\n/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _mockApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mockApi */ \"./src/services/mockApi.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n// Centralized API service for backend communication\n\n\n\nclass ApiService {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        // Use mock API if configured\n        if (this.useMockApi) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.debug(\"Using mock API service\");\n            return this.delegateToMockApi(endpoint, options);\n        }\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), this.timeout);\n        const defaultHeaders = {\n            \"Content-Type\": \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\"\n        };\n        // Add auth token if available\n        const token =  true ? localStorage.getItem(\"authToken\") : 0;\n        if (token) {\n            defaultHeaders[\"Authorization\"] = \"Bearer \".concat(token);\n        }\n        const config = {\n            ...options,\n            headers: {\n                ...defaultHeaders,\n                ...options.headers\n            },\n            signal: controller.signal\n        };\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.debug(\"API Request: \".concat(options.method || \"GET\", \" \").concat(url));\n            const response = await fetch(url, config);\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const data = await response.json();\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.debug(\"API Response: \".concat(url), data);\n            return data;\n        } catch (error) {\n            clearTimeout(timeoutId);\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"API Error: \".concat(url), error);\n            if (error.name === \"AbortError\") {\n                throw new Error(_config_constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_MESSAGES.network);\n            }\n            // Fallback to mock API if real API fails\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"Real API failed, falling back to mock API\");\n            this.useMockApi = true;\n            return this.delegateToMockApi(endpoint, options);\n        }\n    }\n    async delegateToMockApi(endpoint, options) {\n        const method = options.method || \"GET\";\n        const body = options.body ? JSON.parse(options.body) : undefined;\n        // Route to appropriate mock API method based on endpoint and method\n        try {\n            if (endpoint === \"/auth/tenant/login\" && method === \"POST\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.login(body.roomNumber, body.aadhaarNumber);\n            }\n            if (endpoint === \"/auth/owner/login\" && method === \"POST\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.loginOwner(body.email, body.password);\n            }\n            if (endpoint === \"/auth/logout\" && method === \"POST\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.logout();\n            }\n            if (endpoint === \"/auth/refresh\" && method === \"POST\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.refreshToken();\n            }\n            if (endpoint.startsWith(\"/tenants/\") && endpoint.endsWith(\"/notifications\")) {\n                const tenantId = endpoint.split(\"/\")[2];\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.getNotifications(tenantId);\n            }\n            if (endpoint.startsWith(\"/tenants/\") && !endpoint.includes(\"/\")) {\n                const tenantId = endpoint.split(\"/\")[2];\n                if (method === \"GET\") {\n                    return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.getTenantProfile(tenantId);\n                }\n                if (method === \"PUT\") {\n                    return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.updateTenantProfile(tenantId, body);\n                }\n            }\n            if (endpoint.startsWith(\"/tenants/\") && endpoint.endsWith(\"/payments\")) {\n                const tenantId = endpoint.split(\"/\")[2];\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.getTenantPayments(tenantId);\n            }\n            if (endpoint.startsWith(\"/tenants/\") && endpoint.endsWith(\"/service-requests\")) {\n                const tenantId = endpoint.split(\"/\")[2];\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.getTenantServiceRequests(tenantId);\n            }\n            if (endpoint === \"/owner/tenants\" && method === \"GET\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.getAllTenants();\n            }\n            if (endpoint === \"/owner/rooms\" && method === \"GET\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.getAllRooms();\n            }\n            if (endpoint === \"/owner/payments\" && method === \"GET\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.getAllPayments();\n            }\n            if (endpoint === \"/owner/service-requests\" && method === \"GET\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.getAllServiceRequests();\n            }\n            if (endpoint === \"/payments\" && method === \"POST\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.submitPayment(body);\n            }\n            if (endpoint === \"/service-requests\" && method === \"POST\") {\n                return await _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.createServiceRequest(body);\n            }\n            // Default fallback\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"No mock implementation for \".concat(method, \" \").concat(endpoint));\n            return {\n                success: true,\n                data: []\n            };\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"Mock API error\", error);\n            return {\n                success: false,\n                error: \"Mock API error\"\n            };\n        }\n    }\n    async retryRequest(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        let lastError;\n        for(let attempt = 1; attempt <= this.retryAttempts; attempt++){\n            try {\n                return await this.request(endpoint, options);\n            } catch (error) {\n                lastError = error;\n                if (attempt < this.retryAttempts) {\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"API retry attempt \".concat(attempt, \" failed, retrying...\"), error);\n                    await new Promise((resolve)=>setTimeout(resolve, this.retryDelay * attempt));\n                }\n            }\n        }\n        throw lastError;\n    }\n    // Authentication APIs\n    async login(roomNumber, aadhaarNumber) {\n        return this.retryRequest(\"/auth/tenant/login\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                roomNumber,\n                aadhaarNumber\n            })\n        });\n    }\n    async loginOwner(email, password) {\n        return this.retryRequest(\"/auth/owner/login\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n    }\n    async logout() {\n        return this.retryRequest(\"/auth/logout\", {\n            method: \"POST\"\n        });\n    }\n    async refreshToken() {\n        return this.retryRequest(\"/auth/refresh\", {\n            method: \"POST\"\n        });\n    }\n    // Tenant APIs\n    async getTenantProfile(tenantId) {\n        return this.retryRequest(\"/tenants/\".concat(tenantId));\n    }\n    async updateTenantProfile(tenantId, data) {\n        return this.retryRequest(\"/tenants/\".concat(tenantId), {\n            method: \"PUT\",\n            body: JSON.stringify(data)\n        });\n    }\n    async completeTenantOnboarding(tenantId, data) {\n        return this.retryRequest(\"/tenants/\".concat(tenantId, \"/onboarding\"), {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async uploadTenantDocument(tenantId, file, type) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"type\", type);\n        return this.retryRequest(\"/tenants/\".concat(tenantId, \"/documents\"), {\n            method: \"POST\",\n            body: formData,\n            headers: {}\n        });\n    }\n    // Owner APIs - Full access to all data\n    async getAllTenants() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, filters = arguments.length > 2 ? arguments[2] : void 0;\n        const params = new URLSearchParams({\n            page: page.toString(),\n            limit: limit.toString(),\n            ...filters\n        });\n        return this.retryRequest(\"/owner/tenants?\".concat(params));\n    }\n    async getTenantById(tenantId) {\n        return this.retryRequest(\"/owner/tenants/\".concat(tenantId));\n    }\n    async updateTenantByOwner(tenantId, data) {\n        return this.retryRequest(\"/owner/tenants/\".concat(tenantId), {\n            method: \"PUT\",\n            body: JSON.stringify(data)\n        });\n    }\n    async deleteTenant(tenantId) {\n        return this.retryRequest(\"/owner/tenants/\".concat(tenantId), {\n            method: \"DELETE\"\n        });\n    }\n    // Room Management APIs\n    async getAllRooms() {\n        return this.retryRequest(\"/owner/rooms\");\n    }\n    async getRoomById(roomId) {\n        return this.retryRequest(\"/owner/rooms/\".concat(roomId));\n    }\n    async createRoom(data) {\n        return this.retryRequest(\"/owner/rooms\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async updateRoom(roomId, data) {\n        return this.retryRequest(\"/owner/rooms/\".concat(roomId), {\n            method: \"PUT\",\n            body: JSON.stringify(data)\n        });\n    }\n    async deleteRoom(roomId) {\n        return this.retryRequest(\"/owner/rooms/\".concat(roomId), {\n            method: \"DELETE\"\n        });\n    }\n    async assignTenantToRoom(roomId, tenantId) {\n        return this.retryRequest(\"/owner/rooms/\".concat(roomId, \"/assign\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                tenantId\n            })\n        });\n    }\n    async removeTenantFromRoom(roomId) {\n        return this.retryRequest(\"/owner/rooms/\".concat(roomId, \"/remove-tenant\"), {\n            method: \"POST\"\n        });\n    }\n    // Payment APIs\n    async submitPayment(data) {\n        return this.retryRequest(\"/payments\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async getTenantPayments(tenantId) {\n        return this.retryRequest(\"/tenants/\".concat(tenantId, \"/payments\"));\n    }\n    async getAllPayments() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, filters = arguments.length > 2 ? arguments[2] : void 0;\n        const params = new URLSearchParams({\n            page: page.toString(),\n            limit: limit.toString(),\n            ...filters\n        });\n        return this.retryRequest(\"/owner/payments?\".concat(params));\n    }\n    async updatePaymentStatus(paymentId, status) {\n        return this.retryRequest(\"/owner/payments/\".concat(paymentId, \"/status\"), {\n            method: \"PUT\",\n            body: JSON.stringify({\n                status\n            })\n        });\n    }\n    async verifyPayment(paymentId, verified) {\n        return this.retryRequest(\"/owner/payments/\".concat(paymentId, \"/verify\"), {\n            method: \"PUT\",\n            body: JSON.stringify({\n                verified\n            })\n        });\n    }\n    // Service Request APIs\n    async createServiceRequest(data) {\n        return this.retryRequest(\"/service-requests\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async getTenantServiceRequests(tenantId) {\n        return this.retryRequest(\"/tenants/\".concat(tenantId, \"/service-requests\"));\n    }\n    async getAllServiceRequests() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, filters = arguments.length > 2 ? arguments[2] : void 0;\n        const params = new URLSearchParams({\n            page: page.toString(),\n            limit: limit.toString(),\n            ...filters\n        });\n        return this.retryRequest(\"/owner/service-requests?\".concat(params));\n    }\n    async updateServiceRequestStatus(requestId, status) {\n        return this.retryRequest(\"/owner/service-requests/\".concat(requestId, \"/status\"), {\n            method: \"PUT\",\n            body: JSON.stringify({\n                status\n            })\n        });\n    }\n    async addServiceRequestNote(requestId, note) {\n        return this.retryRequest(\"/owner/service-requests/\".concat(requestId, \"/notes\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                note\n            })\n        });\n    }\n    // Notification APIs\n    async getNotifications(userId) {\n        return this.retryRequest(\"/users/\".concat(userId, \"/notifications\"));\n    }\n    async markNotificationAsRead(notificationId) {\n        return this.retryRequest(\"/notifications/\".concat(notificationId, \"/read\"), {\n            method: \"PUT\"\n        });\n    }\n    async markAllNotificationsAsRead(userId) {\n        return this.retryRequest(\"/users/\".concat(userId, \"/notifications/read-all\"), {\n            method: \"PUT\"\n        });\n    }\n    async sendNotification(data) {\n        return this.retryRequest(\"/owner/notifications/send\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async sendBulkNotifications(data) {\n        return this.retryRequest(\"/owner/notifications/send-bulk\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    // Analytics APIs\n    async getDashboardStats() {\n        return this.retryRequest(\"/owner/analytics/dashboard\");\n    }\n    async getRevenueAnalytics(period) {\n        return this.retryRequest(\"/owner/analytics/revenue?period=\".concat(period));\n    }\n    async getOccupancyAnalytics(period) {\n        return this.retryRequest(\"/owner/analytics/occupancy?period=\".concat(period));\n    }\n    async getPaymentAnalytics(period) {\n        return this.retryRequest(\"/owner/analytics/payments?period=\".concat(period));\n    }\n    async exportData(type) {\n        let format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"csv\";\n        return this.retryRequest(\"/owner/export/\".concat(type, \"?format=\").concat(format), {\n            method: \"POST\"\n        });\n    }\n    // File Upload APIs\n    async uploadFile(file, type, metadata) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"type\", type);\n        if (metadata) {\n            formData.append(\"metadata\", JSON.stringify(metadata));\n        }\n        return this.retryRequest(\"/upload\", {\n            method: \"POST\",\n            body: formData,\n            headers: {}\n        });\n    }\n    async deleteFile(fileId) {\n        return this.retryRequest(\"/files/\".concat(fileId), {\n            method: \"DELETE\"\n        });\n    }\n    // Real-time connection APIs\n    async subscribeToUpdates(userId, callback) {\n        if (this.useMockApi) {\n            return _mockApi__WEBPACK_IMPORTED_MODULE_2__.mockApiService.subscribeToUpdates(userId, callback);\n        }\n        // WebSocket connection for real-time updates\n        const wsUrl = this.baseUrl.replace(\"http\", \"ws\") + \"/ws/\".concat(userId);\n        const ws = new WebSocket(wsUrl);\n        ws.onopen = ()=>{\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"WebSocket connected\");\n        };\n        ws.onmessage = (event)=>{\n            try {\n                const data = JSON.parse(event.data);\n                callback(data);\n            } catch (error) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"WebSocket message parse error\", error);\n            }\n        };\n        ws.onerror = (error)=>{\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"WebSocket error\", error);\n        };\n        ws.onclose = ()=>{\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"WebSocket disconnected\");\n        };\n        // Return cleanup function\n        return ()=>{\n            ws.close();\n        };\n    }\n    constructor(){\n        this.baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || \"http://localhost:5000/api\";\n        this.timeout = parseInt(process.env.NEXT_PUBLIC_API_TIMEOUT || \"10000\");\n        this.retryAttempts = 3;\n        this.retryDelay = 1000;\n        // Use mock API if no backend is available or in development mode\n        this.useMockApi =  true || 0;\n    }\n}\nconst apiService = new ApiService();\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/api.ts\n"));

/***/ }),

/***/ "./src/services/mockApi.ts":
/*!*********************************!*\
  !*** ./src/services/mockApi.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mockApiService: function() { return /* binding */ mockApiService; }\n/* harmony export */ });\n// Mock API service to simulate backend responses\n// Mock data\nconst mockTenants = [\n    {\n        uid: \"tenant-101\",\n        roomNumber: \"101\",\n        name: \"John Doe\",\n        email: \"john@example.com\",\n        phone: \"+91 9876543210\",\n        aadhaarNumber: \"1234-5678-9012\",\n        emergencyContact: {\n            name: \"Jane Doe\",\n            phone: \"+91 9876543211\",\n            relation: \"Sister\"\n        },\n        documents: {\n            aadhaar: \"https://example.com/aadhaar.pdf\",\n            photo: \"https://example.com/photo.jpg\"\n        },\n        isOnboardingComplete: true,\n        createdAt: \"2024-01-15T10:00:00Z\",\n        updatedAt: \"2024-01-15T10:00:00Z\"\n    },\n    {\n        uid: \"tenant-102\",\n        roomNumber: \"102\",\n        name: \"Alice Smith\",\n        email: \"alice@example.com\",\n        phone: \"+91 9876543212\",\n        aadhaarNumber: \"2345-6789-0123\",\n        emergencyContact: {\n            name: \"Bob Smith\",\n            phone: \"+91 9876543213\",\n            relation: \"Husband\"\n        },\n        documents: {\n            aadhaar: \"https://example.com/aadhaar2.pdf\",\n            photo: \"https://example.com/photo2.jpg\"\n        },\n        isOnboardingComplete: true,\n        createdAt: \"2024-01-16T10:00:00Z\",\n        updatedAt: \"2024-01-16T10:00:00Z\"\n    }\n];\nconst mockRooms = [\n    {\n        id: \"room-101\",\n        roomNumber: \"101\",\n        floor: 1,\n        type: \"single\",\n        rent: 8000,\n        deposit: 16000,\n        amenities: [\n            \"AC\",\n            \"WiFi\",\n            \"Attached Bathroom\"\n        ],\n        isOccupied: true,\n        tenantId: \"tenant-101\",\n        createdAt: \"2024-01-01T00:00:00Z\",\n        updatedAt: \"2024-01-15T10:00:00Z\"\n    },\n    {\n        id: \"room-102\",\n        roomNumber: \"102\",\n        floor: 1,\n        type: \"single\",\n        rent: 8500,\n        deposit: 17000,\n        amenities: [\n            \"AC\",\n            \"WiFi\",\n            \"Attached Bathroom\",\n            \"Balcony\"\n        ],\n        isOccupied: true,\n        tenantId: \"tenant-102\",\n        createdAt: \"2024-01-01T00:00:00Z\",\n        updatedAt: \"2024-01-16T10:00:00Z\"\n    },\n    {\n        id: \"room-103\",\n        roomNumber: \"103\",\n        floor: 1,\n        type: \"double\",\n        rent: 12000,\n        deposit: 24000,\n        amenities: [\n            \"AC\",\n            \"WiFi\",\n            \"Attached Bathroom\",\n            \"Balcony\"\n        ],\n        isOccupied: false,\n        createdAt: \"2024-01-01T00:00:00Z\",\n        updatedAt: \"2024-01-01T00:00:00Z\"\n    }\n];\nconst mockPayments = [\n    {\n        id: \"payment-1\",\n        tenantId: \"tenant-101\",\n        roomNumber: \"101\",\n        amount: 8000,\n        type: \"rent\",\n        month: \"2024-01\",\n        status: \"verified\",\n        paymentMethod: \"upi\",\n        transactionId: \"TXN123456789\",\n        receiptUrl: \"https://example.com/receipt1.pdf\",\n        submittedAt: \"2024-01-05T10:00:00Z\",\n        verifiedAt: \"2024-01-05T11:00:00Z\"\n    },\n    {\n        id: \"payment-2\",\n        tenantId: \"tenant-102\",\n        roomNumber: \"102\",\n        amount: 8500,\n        type: \"rent\",\n        month: \"2024-01\",\n        status: \"pending\",\n        paymentMethod: \"bank_transfer\",\n        transactionId: \"TXN987654321\",\n        receiptUrl: \"https://example.com/receipt2.pdf\",\n        submittedAt: \"2024-01-06T10:00:00Z\"\n    }\n];\nconst mockServiceRequests = [\n    {\n        id: \"service-1\",\n        tenantId: \"tenant-101\",\n        roomNumber: \"101\",\n        type: \"maintenance\",\n        title: \"AC not working\",\n        description: \"The air conditioner in my room is not cooling properly.\",\n        priority: \"high\",\n        status: \"in-progress\",\n        createdAt: \"2024-01-10T10:00:00Z\",\n        updatedAt: \"2024-01-11T10:00:00Z\"\n    },\n    {\n        id: \"service-2\",\n        tenantId: \"tenant-102\",\n        roomNumber: \"102\",\n        type: \"cleaning\",\n        title: \"Deep cleaning request\",\n        description: \"Need deep cleaning service for the room.\",\n        priority: \"medium\",\n        status: \"pending\",\n        createdAt: \"2024-01-12T10:00:00Z\",\n        updatedAt: \"2024-01-12T10:00:00Z\"\n    }\n];\nconst mockNotifications = [\n    {\n        id: \"notif-1\",\n        userId: \"tenant-101\",\n        type: \"payment\",\n        title: \"Payment Verified\",\n        message: \"Your rent payment for January 2024 has been verified.\",\n        read: false,\n        createdAt: \"2024-01-05T11:00:00Z\"\n    },\n    {\n        id: \"notif-2\",\n        userId: \"tenant-102\",\n        type: \"service\",\n        title: \"Service Request Update\",\n        message: \"Your maintenance request is now in progress.\",\n        read: false,\n        createdAt: \"2024-01-11T10:00:00Z\"\n    }\n];\nclass MockApiService {\n    delay() {\n        let ms = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 500;\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    // Authentication APIs\n    async login(roomNumber, aadhaarNumber) {\n        await this.delay();\n        const tenant = mockTenants.find((t)=>t.roomNumber === roomNumber && t.aadhaarNumber === aadhaarNumber);\n        if (tenant) {\n            const user = {\n                uid: tenant.uid,\n                email: tenant.email,\n                role: \"tenant\",\n                roomNumber: tenant.roomNumber,\n                isOnboardingComplete: tenant.isOnboardingComplete\n            };\n            // Store auth token\n            localStorage.setItem(\"authToken\", \"mock-token-\".concat(tenant.uid));\n            return {\n                success: true,\n                data: user\n            };\n        }\n        return {\n            success: false,\n            error: \"Invalid credentials\"\n        };\n    }\n    async loginOwner(email, password) {\n        await this.delay();\n        if (email === \"owner@example.com\" && password === \"password\") {\n            const user = {\n                uid: \"owner-1\",\n                email: \"owner@example.com\",\n                role: \"owner\",\n                isOnboardingComplete: true\n            };\n            localStorage.setItem(\"authToken\", \"mock-token-owner-1\");\n            return {\n                success: true,\n                data: user\n            };\n        }\n        return {\n            success: false,\n            error: \"Invalid credentials\"\n        };\n    }\n    async logout() {\n        await this.delay(200);\n        localStorage.removeItem(\"authToken\");\n        return {\n            success: true\n        };\n    }\n    async refreshToken() {\n        await this.delay(200);\n        return {\n            success: true,\n            data: {\n                token: \"mock-refreshed-token\"\n            }\n        };\n    }\n    // Tenant APIs\n    async getTenantProfile(tenantId) {\n        await this.delay();\n        const tenant = mockTenants.find((t)=>t.uid === tenantId);\n        if (tenant) {\n            return {\n                success: true,\n                data: tenant\n            };\n        }\n        return {\n            success: false,\n            error: \"Tenant not found\"\n        };\n    }\n    async updateTenantProfile(tenantId, data) {\n        await this.delay();\n        const tenantIndex = mockTenants.findIndex((t)=>t.uid === tenantId);\n        if (tenantIndex !== -1) {\n            mockTenants[tenantIndex] = {\n                ...mockTenants[tenantIndex],\n                ...data\n            };\n            return {\n                success: true,\n                data: mockTenants[tenantIndex]\n            };\n        }\n        return {\n            success: false,\n            error: \"Tenant not found\"\n        };\n    }\n    async completeTenantOnboarding(tenantId, data) {\n        await this.delay();\n        return this.updateTenantProfile(tenantId, {\n            ...data,\n            isOnboardingComplete: true\n        });\n    }\n    async uploadTenantDocument(tenantId, file, type) {\n        await this.delay(1000);\n        return {\n            success: true,\n            data: {\n                url: \"https://example.com/\".concat(type, \"-\").concat(tenantId, \".pdf\")\n            }\n        };\n    }\n    // Owner APIs\n    async getAllTenants() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, filters = arguments.length > 2 ? arguments[2] : void 0;\n        await this.delay();\n        return {\n            success: true,\n            data: {\n                data: mockTenants,\n                total: mockTenants.length,\n                page,\n                limit,\n                hasMore: false\n            }\n        };\n    }\n    async getTenantById(tenantId) {\n        return this.getTenantProfile(tenantId);\n    }\n    async updateTenantByOwner(tenantId, data) {\n        return this.updateTenantProfile(tenantId, data);\n    }\n    async deleteTenant(tenantId) {\n        await this.delay();\n        const index = mockTenants.findIndex((t)=>t.uid === tenantId);\n        if (index !== -1) {\n            mockTenants.splice(index, 1);\n            return {\n                success: true\n            };\n        }\n        return {\n            success: false,\n            error: \"Tenant not found\"\n        };\n    }\n    // Room Management APIs\n    async getAllRooms() {\n        await this.delay();\n        return {\n            success: true,\n            data: mockRooms\n        };\n    }\n    async getRoomById(roomId) {\n        await this.delay();\n        const room = mockRooms.find((r)=>r.id === roomId);\n        if (room) {\n            return {\n                success: true,\n                data: room\n            };\n        }\n        return {\n            success: false,\n            error: \"Room not found\"\n        };\n    }\n    async createRoom(data) {\n        await this.delay();\n        const newRoom = {\n            ...data,\n            id: \"room-\".concat(Date.now()),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockRooms.push(newRoom);\n        return {\n            success: true,\n            data: newRoom\n        };\n    }\n    async updateRoom(roomId, data) {\n        await this.delay();\n        const roomIndex = mockRooms.findIndex((r)=>r.id === roomId);\n        if (roomIndex !== -1) {\n            mockRooms[roomIndex] = {\n                ...mockRooms[roomIndex],\n                ...data,\n                updatedAt: new Date().toISOString()\n            };\n            return {\n                success: true,\n                data: mockRooms[roomIndex]\n            };\n        }\n        return {\n            success: false,\n            error: \"Room not found\"\n        };\n    }\n    async deleteRoom(roomId) {\n        await this.delay();\n        const index = mockRooms.findIndex((r)=>r.id === roomId);\n        if (index !== -1) {\n            mockRooms.splice(index, 1);\n            return {\n                success: true\n            };\n        }\n        return {\n            success: false,\n            error: \"Room not found\"\n        };\n    }\n    async assignTenantToRoom(roomId, tenantId) {\n        await this.delay();\n        return this.updateRoom(roomId, {\n            tenantId,\n            isOccupied: true\n        });\n    }\n    async removeTenantFromRoom(roomId) {\n        await this.delay();\n        return this.updateRoom(roomId, {\n            tenantId: undefined,\n            isOccupied: false\n        });\n    }\n    // Payment APIs\n    async submitPayment(data) {\n        await this.delay();\n        const newPayment = {\n            ...data,\n            id: \"payment-\".concat(Date.now()),\n            submittedAt: new Date().toISOString()\n        };\n        mockPayments.unshift(newPayment);\n        return {\n            success: true,\n            data: newPayment\n        };\n    }\n    async getTenantPayments(tenantId) {\n        await this.delay();\n        const payments = mockPayments.filter((p)=>p.tenantId === tenantId);\n        return {\n            success: true,\n            data: payments\n        };\n    }\n    async getAllPayments() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, filters = arguments.length > 2 ? arguments[2] : void 0;\n        await this.delay();\n        return {\n            success: true,\n            data: {\n                data: mockPayments,\n                total: mockPayments.length,\n                page,\n                limit,\n                hasMore: false\n            }\n        };\n    }\n    async updatePaymentStatus(paymentId, status) {\n        await this.delay();\n        const paymentIndex = mockPayments.findIndex((p)=>p.id === paymentId);\n        if (paymentIndex !== -1) {\n            mockPayments[paymentIndex] = {\n                ...mockPayments[paymentIndex],\n                status,\n                verifiedAt: status === \"verified\" ? new Date().toISOString() : undefined\n            };\n            return {\n                success: true,\n                data: mockPayments[paymentIndex]\n            };\n        }\n        return {\n            success: false,\n            error: \"Payment not found\"\n        };\n    }\n    async verifyPayment(paymentId, verified) {\n        const status = verified ? \"verified\" : \"rejected\";\n        return this.updatePaymentStatus(paymentId, status);\n    }\n    // Service Request APIs\n    async createServiceRequest(data) {\n        await this.delay();\n        const newRequest = {\n            ...data,\n            id: \"service-\".concat(Date.now()),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockServiceRequests.unshift(newRequest);\n        return {\n            success: true,\n            data: newRequest\n        };\n    }\n    async getTenantServiceRequests(tenantId) {\n        await this.delay();\n        const requests = mockServiceRequests.filter((sr)=>sr.tenantId === tenantId);\n        return {\n            success: true,\n            data: requests\n        };\n    }\n    async getAllServiceRequests() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, filters = arguments.length > 2 ? arguments[2] : void 0;\n        await this.delay();\n        return {\n            success: true,\n            data: {\n                data: mockServiceRequests,\n                total: mockServiceRequests.length,\n                page,\n                limit,\n                hasMore: false\n            }\n        };\n    }\n    async updateServiceRequestStatus(requestId, status) {\n        await this.delay();\n        const requestIndex = mockServiceRequests.findIndex((sr)=>sr.id === requestId);\n        if (requestIndex !== -1) {\n            mockServiceRequests[requestIndex] = {\n                ...mockServiceRequests[requestIndex],\n                status,\n                updatedAt: new Date().toISOString()\n            };\n            return {\n                success: true,\n                data: mockServiceRequests[requestIndex]\n            };\n        }\n        return {\n            success: false,\n            error: \"Service request not found\"\n        };\n    }\n    async addServiceRequestNote(requestId, note) {\n        await this.delay();\n        const requestIndex = mockServiceRequests.findIndex((sr)=>sr.id === requestId);\n        if (requestIndex !== -1) {\n            const request = mockServiceRequests[requestIndex];\n            request.notes = request.notes || [];\n            request.notes.push({\n                id: \"note-\".concat(Date.now()),\n                text: note,\n                createdAt: new Date().toISOString(),\n                createdBy: \"owner-1\"\n            });\n            request.updatedAt = new Date().toISOString();\n            return {\n                success: true,\n                data: request\n            };\n        }\n        return {\n            success: false,\n            error: \"Service request not found\"\n        };\n    }\n    // Notification APIs\n    async getNotifications(userId) {\n        await this.delay();\n        const notifications = mockNotifications.filter((n)=>n.userId === userId);\n        return {\n            success: true,\n            data: notifications\n        };\n    }\n    async markNotificationAsRead(notificationId) {\n        await this.delay();\n        const notificationIndex = mockNotifications.findIndex((n)=>n.id === notificationId);\n        if (notificationIndex !== -1) {\n            mockNotifications[notificationIndex].read = true;\n            return {\n                success: true\n            };\n        }\n        return {\n            success: false,\n            error: \"Notification not found\"\n        };\n    }\n    async markAllNotificationsAsRead(userId) {\n        await this.delay();\n        mockNotifications.forEach((n)=>{\n            if (n.userId === userId) {\n                n.read = true;\n            }\n        });\n        return {\n            success: true\n        };\n    }\n    async sendNotification(data) {\n        await this.delay();\n        const newNotification = {\n            id: \"notif-\".concat(Date.now()),\n            userId: data.userId,\n            type: data.type,\n            title: data.title,\n            message: data.message,\n            actionUrl: data.actionUrl,\n            read: false,\n            createdAt: new Date().toISOString()\n        };\n        mockNotifications.unshift(newNotification);\n        return {\n            success: true,\n            data: newNotification\n        };\n    }\n    async sendBulkNotifications(data) {\n        await this.delay();\n        data.userIds.forEach((userId)=>{\n            const newNotification = {\n                id: \"notif-\".concat(Date.now(), \"-\").concat(userId),\n                userId,\n                type: data.type,\n                title: data.title,\n                message: data.message,\n                actionUrl: data.actionUrl,\n                read: false,\n                createdAt: new Date().toISOString()\n            };\n            mockNotifications.unshift(newNotification);\n        });\n        return {\n            success: true\n        };\n    }\n    // Analytics APIs\n    async getDashboardStats() {\n        await this.delay();\n        return {\n            success: true,\n            data: {\n                totalRooms: mockRooms.length,\n                occupiedRooms: mockRooms.filter((r)=>r.isOccupied).length,\n                totalTenants: mockTenants.length,\n                pendingPayments: mockPayments.filter((p)=>p.status === \"pending\").length,\n                totalRevenue: mockPayments.filter((p)=>p.status === \"verified\").reduce((sum, p)=>sum + p.amount, 0),\n                pendingServiceRequests: mockServiceRequests.filter((sr)=>sr.status === \"pending\").length\n            }\n        };\n    }\n    async getRevenueAnalytics(period) {\n        await this.delay();\n        return {\n            success: true,\n            data: {\n                period,\n                totalRevenue: 50000,\n                monthlyData: [\n                    {\n                        month: \"Jan\",\n                        revenue: 25000\n                    },\n                    {\n                        month: \"Feb\",\n                        revenue: 25000\n                    }\n                ]\n            }\n        };\n    }\n    async getOccupancyAnalytics(period) {\n        await this.delay();\n        return {\n            success: true,\n            data: {\n                period,\n                occupancyRate: 66.67,\n                monthlyData: [\n                    {\n                        month: \"Jan\",\n                        occupancy: 66.67\n                    },\n                    {\n                        month: \"Feb\",\n                        occupancy: 66.67\n                    }\n                ]\n            }\n        };\n    }\n    async getPaymentAnalytics(period) {\n        await this.delay();\n        return {\n            success: true,\n            data: {\n                period,\n                totalPayments: mockPayments.length,\n                verifiedPayments: mockPayments.filter((p)=>p.status === \"verified\").length,\n                pendingPayments: mockPayments.filter((p)=>p.status === \"pending\").length\n            }\n        };\n    }\n    async exportData(type) {\n        let format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"csv\";\n        await this.delay(2000);\n        return {\n            success: true,\n            data: {\n                downloadUrl: \"https://example.com/export-\".concat(type, \".\").concat(format)\n            }\n        };\n    }\n    // File Upload APIs\n    async uploadFile(file, type, metadata) {\n        await this.delay(1000);\n        return {\n            success: true,\n            data: {\n                url: \"https://example.com/uploads/\".concat(file.name),\n                id: \"file-\".concat(Date.now())\n            }\n        };\n    }\n    async deleteFile(fileId) {\n        await this.delay();\n        return {\n            success: true\n        };\n    }\n    // Real-time connection APIs (mock implementation)\n    async subscribeToUpdates(userId, callback) {\n        // Simulate real-time updates with periodic mock data\n        const interval = setInterval(()=>{\n            // Randomly send mock updates\n            if (Math.random() > 0.8) {\n                const updateTypes = [\n                    \"payment_submitted\",\n                    \"service_request_created\",\n                    \"notification\"\n                ];\n                const randomType = updateTypes[Math.floor(Math.random() * updateTypes.length)];\n                callback({\n                    type: randomType,\n                    data: {\n                        message: \"Mock \".concat(randomType, \" update\")\n                    },\n                    timestamp: new Date().toISOString()\n                });\n            }\n        }, 10000); // Send updates every 10 seconds\n        // Return cleanup function\n        return ()=>{\n            clearInterval(interval);\n        };\n    }\n}\nconst mockApiService = new MockApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/mockApi.ts\n"));

/***/ })

});